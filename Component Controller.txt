public class VFPageComponentController {
  //==========================check box maintain
    public Boolean childCheckbox{get;set;}
    public Boolean masterCheckbox{get;set;}
    
    public String obj{get;set;}   // Store selected object.
    public List<String> objfields{get;set;}  // Store object fields api name list aviable h rightside picklist box me.
    public List<sObject> recordList{get;set;}  // Store after query object fields.
    public  ApexPages.StandardSetController ssc {get;set;}
    public Map<Id, WrapperClass> mapHoldingSelectedRecords{get;set;}   // make a map to store selected records.
    Public Integer size{get;set;}
    public List<SelectOption> paginationSizeOptions{get;set;}
    //==========================Make a string list to store alphabet.
    public List<String> alphabet{get;set;}
    
    public VFPageComponentController(){
        size=5;
        paginationSizeOptions = new List<SelectOption>();
        paginationSizeOptions.add(new SelectOption('5','5'));
        paginationSizeOptions.add(new SelectOption('10','10'));
        paginationSizeOptions.add(new SelectOption('20','20'));
        paginationSizeOptions.add(new SelectOption('50','50'));
        paginationSizeOptions.add(new SelectOption('100','100'));
       // =============== set by default sort direction ======================== 
         if(sortDir == null ){
            sortDir = 'asc';
        }
        // --------------inislize the alphabetlist.
        alphabet = new list<string>{'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','Others','All'}; 
        // ---------------------initialize the map.
         mapHoldingSelectedRecords = new Map<Id, WrapperClass>();
       //  PageNum = 1;
    }
    
    //========================================Dynamic Query Method. ==================================
        String fqry;
        public void queryMethod(){
             try{
            recordList = new List<sObject>();
            String qry = 'Select ';
            integer count = 0;
            for(String f : objfields){
                if(count == 0){
                    qry += f ;
                    count++;
                }
                else{
                    qry += ' ,'+ f ; 
                }
            }
            qry += ' from ' + obj;
            
            fqry = String.escapeSingleQuotes(qry);
            //System.debug(qry);
            //  System.debug(fqry);
            ssc = new ApexPages.StandardSetController(Database.query(fqry));
                ssc.setPageSize(size);             // ==============================   this line set the default page size.
                TotalPage();  
                recordList = ssc.getRecords();
            // fieldlist = Database.query(fqry);
            System.debug('ssc :'+ ssc);
            System.debug(recordList);
       //     ssc.setPageSize(size); Not working.  
            }
              catch(Exception e){
               // ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR,'No such combination exists');
               // ApexPages.addMessage(myMsg);
               System.debug(e);
            }
             wrapperlist();
        }
    
    // =================================    wrapper class initiazation
    public List<WrapperClass> wrapperRecordList{get;set;} 
    public void wrapperlist(){
    //    ssc.setPageSize(size); // set page size after query. ========Not working.
        wrapperRecordList = new  List<WrapperClass>();
        for(sObject Record : recordList){
            if(mapHoldingSelectedRecords != null && mapHoldingSelectedRecords.containsKey(Record.id)){
                wrapperRecordList.add(mapHoldingSelectedRecords.get(Record.id));
            }
            else{
           	   wrapperRecordList.add(new wrapperClass(Record,false));
            }
        }
         System.debug('Wrapper recoord list _' +wrapperRecordList);
     
     
    }
    
    //===========================  Checkbox selected records.
    public List<Wrapperclass> SelectedList{get;set;}
    public void selectedRecord(){
        SelectedList = new List<Wrapperclass>(); 
        for(Wrapperclass obj : wrapperRecordList){
            if(obj.checkbox == true){
            	    SelectedList.add(obj);
            }
        }
    }

  // =========================== Set the PageSize to display recrods on page
    
    public PageReference refreshPageSize() {
        System.debug('size = '+size);
        ssc.setPageSize(size);
        recordList = ssc.getRecords();
        wrapperlist();
        TotalPage();
        System.debug('total page in recrod list '+Totalpages);
        return null;
    }
    
    // =================  Delete the record form the page =============================
    
    public void Deletes(){
        Id id = System.currentPageReference().getParameters().get('id');
        System.debug(id);
        Database.delete(id);
        queryMethod();
      //  recordList = ssc.getRecords();
        
    }
    
    //=======================================================Sorting Methods ==============================================================
    public string sortField{get;set;}
    
    public String sortDir{get;set;}
    
    public void toggleSort(){
     //   recordlist.clear();      because recordlist is readonly. not clear this list.
        wrapperRecordList.clear();
        if(sortField == null){
            sortField = 'Name';
        }
         sortDir = sortDir.equals('asc') ? 'desc' : 'asc';
       //   recordlist = Database.query(fqry+ ' order by ' + sortField + ' ' + sortDir);
          ssc = new ApexPages.StandardSetController(Database.query(fqry+ ' order by ' + sortField + ' ' + sortDir));
          ssc.setPageSize(size);// ==============================   after query  page size set.
          TotalPage();
          recordList = ssc.getRecords();
          wrapperlist();
    
    } 
    
    //====================================    Aphabet search Methord =========================
    public string alphaSearchValue{get;set;}
       
    public void alphaSearch(){
        System.debug('hello from alphabat all');
        if(sortField == null){
            sortField = 'Name';
        }
        
        if(alphaSearchValue == 'All'){
            ssc = new ApexPages.StandardSetController(Database.query(fqry));
            ssc.setPageSize(size);// ==============================   after query  page size set.
            TotalPage();
            recordList = ssc.getRecords();
            wrapperlist();
        }
        else{
            String searchVar =  alphaSearchValue;
            ssc = new ApexPages.StandardSetController(Database.query(fqry+' Where '+ sortField +  ' Like \'' +  searchVar + '%\''));
            ssc.setPageSize(size);// ==============================   after query  page size set.
            TotalPage();
            recordList = ssc.getRecords();
            wrapperlist();
        }
    }  
    // =============================Current page number & totalpage No. ====================
       /** returns the page number of the current page set*/
    public Integer PageNum{get;set;}
    public void frpageNumber() {
            System.debug('Hello form frpageNumber Method');
            ssc.setPageNumber(PageNum);
       	//	ssc.getRecords();
        //    wrapperlist(); 
           System.debug('After page number set - '+ssc.getPageNumber());
    }
    
      /** return total number of pages for page set*/
      Public Integer Totalpages{get;set;}
      Public void TotalPage(){
        Decimal totalSize = ssc.getResultSize();
        Decimal pageSize = ssc.getPageSize();
        Decimal pages = totalSize/pageSize;
        Totalpages = (Integer)pages.round(System.RoundingMode.CEILING);
      }
    
    
   
    //===========================1. First 2.Last 3.Next 4. Previous Methods. ===============================
    
    /** returns the first page of the page set*/
    
    public void first() {
          updateSearchItemsMap();
          ssc.first();
          recordList = ssc.getrecords();
       //   ssc.setPageSize(size);
          wrapperlist(); 
     
    }
    
    /** returns the last page of the page set*/
    public void last() {
          updateSearchItemsMap();
          ssc.last();
          recordList = ssc.getrecords();
      //    ssc.setPageSize(size);
    
          wrapperlist();
    }
    
    /** returns the previous page of the page set*/
    public void previous() {
          updateSearchItemsMap();
          ssc.previous();
          recordList = ssc.getrecords();
   //        ssc.setPageSize(size);
          wrapperlist();
    }
    
    /** returns the next page of the page set*/
    
    public void next() {
          System.debug('calling the next method.');
          updateSearchItemsMap();
          ssc.next();
          recordList = ssc.getrecords();
     //     ssc.setPageSize(size);
          wrapperlist();
     
        System.debug('calling the next method.');
    }
    //This is the method which manages to remove the deselected records, and keep the records which are selected in map.
    public void updateSearchItemsMap(){
        for(WrapperClass wrp : wrapperRecordList){
            if(wrp.checkbox){
                mapHoldingSelectedRecords.put(wrp.Record.id, wrp);
            }
            if(wrp.checkbox == false && mapHoldingSelectedRecords.containsKey(wrp.Record.id)){
                System.debug('remove values.'+ wrp.Record.id);
                mapHoldingSelectedRecords.remove(wrp.Record.id);
            }
            
        }
    }
    // ====================================== Delete Selected Record =====================================
    public list<Id> selectedIds;
    public void deleteSelectedRecord(){
        selectedIds = new list<Id>();
        System.debug(mapHoldingSelectedRecords);
        for(Id var : mapHoldingSelectedRecords.keySet()){ //WrapperRecordList
           
             selectedIds.add(var);
        }
		  Database.delete(selectedIds);
    }
    
    // =========================================== Create a Wrapper class ==================================
   
    
    public class WrapperClass {
        public Boolean checkbox {get;set;}
        public sObject Record {get;set;}
        public WrapperClass(sObject Record, Boolean checkBox) {
            this.Record = Record;
            this.checkbox = checkbox;
        }
    }       
}